<?php
namespace Salesking\Tests\PHPSDK;

/**
 * @version     2.0.0
 * @package     SalesKing PHP SDK Tests
 * @license     MIT License; see LICENSE
 * @copyright   Copyright (C) 2012 David Jardin
 * @link        http://www.salesking.eu
 */
use Salesking\PHPSDK\Entity;

/**
 * Test class for SaleskingObject.
 * Generated by PHPUnit on 2012-04-23 at 21:46:33.
 */
class EntityTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Entity
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $apiMock = $this->getMock("\\Salesking\\PHPSDK\\API", array(), array(), '', false);

        $apiMock->expects($this->any())
            ->method("request")
            ->will(
                $this->returnCallback(array($this,'getMockRequest'))
            );

        $this->object = new Entity($apiMock, array("obj_type"=>"contact"));
    }

    /**
     * Returns correct Mock request for each test scenario
     *
     * @param string $url
     * @param string $method
     * @param null   $data
     *
     * @return mixed
     */
    public function getMockRequest($url, $method = "GET", $data = null)
    {
        $response = array();

        if ($url == "/api/contacts/1ef0a371-2d8a-4478-8ef" && $method == "GET") {
            $response["code"] = "200";
            $body = new \stdClass();

            $body->contact = array(
                "organisation" => "salesking",
                "first_name" => "john",
                "id" => "1ef0a371-2d8a-4478-8ef",
                "type"=> "Client"
            );

            $response["body"] = $body;
        }

        if ($url == "/api/contacts/aed0eb9b-0276-4da7-ad8" && $method == "GET") {
            $response["code"] = "404";
            $response["body"] = '';
        }

        if ($url == "/api/contacts/1ef0a371-2d8a-4478-8ef" && $method == "DELETE") {
            $response["code"] = "200";
            $response["body"] = true;
        }

        if ($url == "/api/contacts/aed0eb9b-0276-4da7-ad8" && $method == "DELETE") {
            $response["code"] = "404";
            $response["body"] = '';
        }

        if ($url == "/api/contacts/1ef0a371-2d8a-4478-8ef" && $method == "PUT") {
            $response["code"] = "200";
            $body = new \stdClass();

            $body->contact = array(
                "organisation" => "salesking",
                "first_name" => "john",
                "id" => "1ef0a371-2d8a-4478-8ef",
                "type"=> "Client"
            );

            $response["body"] = $body;
        }

        if ($url == "/api/contacts/aed0eb9b-0276-4da7-ad8" && $method == "PUT") {
            $response["code"] = "404";
            $response["body"] = '';
        }

        if ($url == "/api/contacts"
            && $method == "POST"
            && $data == '{"contact":{"id":"","organisation":"salesking","type":"Client"}}'
        ) {
            $response["code"] = "201";

            $body = new \stdClass();
            $body->contact = array(
                "organisation" => "salesking",
                "first_name" => "john",
                "id" => "1ef0a371-2d8a-4478-8ef",
                "type"=> "Client"
            );

            $response["body"] = $body;
        }

        # mock testSaveApiError
        if ($url == "/api/contacts"
            && $method == "POST"
            && $data == '{"contact":{"organisation":"testcompany","id":""}}'
        ) {
            $response["code"] = "405";
            $response["body"] = '';
        }

        return $response;
    }

    /**
     * @covers Entity::__set
     */
    public function testPropertyCanBeSet()
    {
        //set a correct value on a existing property
        $this->object->organisation = "salesking";
        $this->assertEquals(
            "salesking",
            $this->object->getData("object")->organisation
        );
    }

    /**
     * @covers Entity::__set
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionCode SET_INVALIDPROPERTY
     * @expectedExceptionMessage invalid property for this object type
     */
    public function testSettingAnNotExistingPropertyThrowsException()
    {
        $this->object->notexisting = "string";
    }

    /**
     * @covers Entity::__set
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionCode SET_PROPERTYVALIDATION
     * @expectedExceptionMessage invalid property value. Property: cash_discount - Value: string
     */
    public function testSettingAnInvalidValueOnAnExistingPropertyThrowsException()
    {
        $this->object->cash_discount = "string";
    }

    /**
     * @covers Entity::validate
     */
    public function testValidateReturnsFalseOnNotExistingProperties()
    {
        // make sure that not existing properties return false
        $this->assertFalse($this->object->validate("notexisting", "string"));
    }

    /**
     * @covers Entity::validate
     */
    public function testValidateHandlesIntValuesCorrectly()
    {
        // test property type integer
        $this->assertFalse($this->object->validate("due_days", "string"));
        $this->assertFalse($this->object->validate("due_days", array()));
        $this->assertFalse($this->object->validate("due_days", new \stdClass()));
        $this->assertFalse($this->object->validate("due_days", 12.2));
        $this->assertTrue($this->object->validate("due_days", "12"));
        $this->assertTrue($this->object->validate("due_days", 12));
    }

    /**
     * @covers Entity::validate
     */
    public function testValidateHandlesNumberValuesCorrectly()
    {
        // test property type number
        $this->assertFalse($this->object->validate("cash_discount", "string"));
        $this->assertFalse($this->object->validate("cash_discount", array()));
        $this->assertFalse($this->object->validate("cash_discount", new \stdClass()));
        $this->assertTrue($this->object->validate("cash_discount", 12.2));
        $this->assertTrue($this->object->validate("cash_discount", "12"));
        $this->assertTrue($this->object->validate("cash_discount", 12));
    }

    /**
     * @covers Entity::validate
     */
    public function testValidateHandlesArrayValuesCorrectly()
    {
        // test property type array
        $this->assertFalse($this->object->validate("addresses", "string"));
        $this->assertFalse($this->object->validate("addresses", new \stdClass()));
        $this->assertFalse($this->object->validate("addresses", 12.2));
        $this->assertFalse($this->object->validate("addresses", 12));
        $this->assertTrue($this->object->validate("addresses", array()));
    }


    /**
     * @covers Entity::validate
     */
    public function testValidateHandlesMaxLengthCorrectly()
    {
        // test property maxlength
        $this->assertTrue($this->object->validate("tax_number", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        $this->assertFalse($this->object->validate("tax_number", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    /**
     * @covers Entity::validate
     */
    public function testValidateHandlesDefaultValuesCorrectly()
    {
        // test property default values
        $this->assertFalse($this->object->validate("payment_method", "string"));
        $this->assertFalse($this->object->validate("payment_method", array()));
        $this->assertTrue($this->object->validate("payment_method", ""));
        $this->assertTrue($this->object->validate("payment_method", "paypal"));
    }

    /**
     * @covers Entity::validate
     */
    public function testValidateHandlesDateFormatsCorrectly()
    {
        // test property format date
        $this->assertFalse($this->object->validate("birthday", "1999/01/01"));
        $this->assertFalse($this->object->validate("birthday", "string"));
        $this->assertFalse($this->object->validate("birthday", "123"));
        $this->assertFalse($this->object->validate("birthday", "1999-01-32"));
        $this->assertFalse($this->object->validate("birthday", "1999-13-01"));
        $this->assertTrue($this->object->validate("birthday", "1999-01-01"));
    }

    /**
     * @covers Entity::__get
     */
    public function testGetterReturnsCorrectData()
    {
        $this->object->organisation = "salesking";

        $this->assertEquals(
            "salesking",
            $this->object->organisation
        );
    }

    /**
     * @covers Entity::__get
     */
    public function getGetterReturnsNullOnNonexistingProperties()
    {
        $this->assertNull($this->object->notexisting);
    }

    /**
     * @covers Entity::__toString
     */
    public function testToStringReturnsCorrectJson()
    {
        $this->object->organisation = "salesking";

        $this->assertEquals(
            '{"organisation":"salesking"}',
            (string) $this->object
        );
    }

    /**
     * @covers Entity::bind
     */
    public function testBindCorrectlyAssignsDataarrayToProperties()
    {
        // test bind method with an array
        $data = array(
            "organisation" => "salesking",
            "first_name" => "max",
            "notexisting" => "string",
            "lastname" => "john"
        );

        $this->object->bind($data, array("lastname" => "last_name"));

        $this->assertEquals(
            "salesking",
            $this->object->organisation
        );

        $this->assertEquals(
            "max",
            $this->object->first_name
        );

        $this->assertEquals(
            "john",
            $this->object->last_name
        );
    }

    /**
     * @covers Entity::bind
     */
    public function testBindCorrectlyAssignsDataobjectToProperties()
    {
        // test bind method with an object
        $data = new \stdClass();
        $data->organisation = "salesking1";
        $data->first_name = "max1";
        $data->notexisting = "string1";
        $data->lastname = "john1";

        $this->object->bind($data, array("lastname" => "last_name"));

        $this->assertEquals(
            "salesking1",
            $this->object->organisation
        );

        $this->assertEquals(
            "max1",
            $this->object->first_name
        );

        $this->assertEquals(
            "john1",
            $this->object->last_name
        );
    }

    /**
     * @covers Entity::bind
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionCode BIND_INVALIDTYPE
     * @expectedExceptionMessage invalid data type - please provide an array or object
     */
    public function testBindThrowsExceptionOnInvalidDatatype()
    {
        $this->object->bind("string");
    }

    /**
     * @covers Entity::getType
     */
    public function testGetObjTypeReturnsCorrectType()
    {
        $this->assertEquals(
            "contact",
            $this->object->getObjType()
        );
    }

    /**
     * @covers Entity::setType
     */
    public function testSetObjTypeSetsCorrectType()
    {
        $this->object->setObjType("invoice");

        $this->assertEquals(
            "invoice",
            $this->object->getObjType()
        );
    }

    /**
     * @covers Entity::getData
     */
    public function testGetDataReturnsCorrectDataArrayFromContainer()
    {
        $this->object->organisation = "salesking";
        $this->object->last_name = "bush";

        $this->assertEquals(
            array("organisation" => "salesking", "last_name" => "bush"),
            $this->object->getData()
        );
    }

    /**
     * @covers Entity::getData
     */
    public function testGetDataReturnsCorrectDataObjectFromContainer()
    {
        $this->object->organisation = "salesking";
        $this->object->last_name = "bush";

        $expected = new \stdClass();
        $expected->organisation = "salesking";
        $expected->last_name = "bush";

        $this->assertEquals(
            $expected,
            $this->object->getData("object")
        );
    }

    /**
     * @covers Entity::getData
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionMessage Invalid format
     * @expectedExceptionCode GETDATA_FORMAT
     */
    public function testGetDataThrowsExceptionForNotExistingDataFormat()
    {
        $this->object->getData("notexisting");
    }

    /**
     * @covers Entity::save
     */
    public function testSaveUpdateMergesDataFromApi()
    {
        // simulate an successful update
        $this->object->id = "1ef0a371-2d8a-4478-8ef";
        $this->object->save();
        $this->assertEquals(
            array(
                "organisation" => "salesking",
                "first_name" => "john",
                "id" => "1ef0a371-2d8a-4478-8ef",
                "type"=> "Client"
            ),
            $this->object->getData()
        );
    }
    /**
     * @covers Entity::save
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionMessage Update failed, an error occured
     * @expectedExceptionCode UPDATE_ERROR
     */
    public function testSaveThrowsExceptionOnUpdateError()
    {
        // simulate an error while updating
        $this->object->id = "aed0eb9b-0276-4da7-ad8";
        $this->object->save();
    }
    /**
     * @covers Entity::save
     */
    public function testSaveCreateMergesDataFromApi()
    {
        // simulate a successful post
        $this->object->id = "";
        $this->object->organisation = "salesking";
        $this->object->type = "Client";
        $this->object->save();

        $this->assertEquals(
            array("organisation" => "salesking",
                "first_name" => "john",
                "id" => "1ef0a371-2d8a-4478-8ef",
                "type"=> "Client"
            ),
            $this->object->getData()
        );
    }

    /**
     * @covers Entity::save
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionMessage Create failed, an error occured.
     * @expectedExceptionCode CREATE_ERROR
     */
    public function testSaveThrowsExceptionOnCreateError()
    {
        // simulate an error on the api side
        $this->object->organisation = "testcompany";
        $this->object->id = "";

        $this->object->save();
    }

    /**
     * @covers Entity::load
     */
    public function testLoadPopulatesDataIntoContainer()
    {
        //load existing object
        $this->object->id = "1ef0a371-2d8a-4478-8ef";
        $this->object->load();

        $this->assertEquals(
            array(
                "organisation" => "salesking",
                "first_name" => "john",
                "id" => "1ef0a371-2d8a-4478-8ef",
                "type" => "Client"
            ),
            $this->object->getData()
        );
    }

    /**
     * @covers Entity::load
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionMessage Fetching failed, an error happend
     * @expectedExceptionCode LOAD_ERROR
     */
    public function testLoadThrowsExceptionOnNonExistingItem()
    {
        //load not existing object
        $this->object->id = "aed0eb9b-0276-4da7-ad8";
        $this->object->load();
    }

    /**
     * @covers Entity::load
     */
    public function testLoadFetchesItemByIdArgument()
    {
        //load object by directly setting ID as parameter
        $this->object->load("1ef0a371-2d8a-4478-8ef");

        $this->assertEquals(
            array(
                "organisation" => "salesking",
                "first_name" => "john",
                "id" => "1ef0a371-2d8a-4478-8ef",
                "type" => "Client"
            ),
            $this->object->getData()
        );
    }

    /**
     * @covers Entity::load
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionMessage could not load object
     * @expectedExceptionCode LOAD_IDNOTSET
     */
    public function testLoadThrowsExceptionIfNoIdIsSet()
    {
        //load object with empty id
        $this->object->id = "";
        $this->object->load();
    }

    /**
     * @covers Entity::delete
     */
    public function testDeleteRemovesObjectAndReturnsResultFromApi()
    {
        // assert we're trying to delete an existing object
        $this->object->id = "1ef0a371-2d8a-4478-8ef";
        $result = $this->object->delete();

        $this->assertTrue($result["body"]);
    }

    /**
     * @covers Entity::delete
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionMessage Deleting failed, an error happend
     * @expectedExceptionCode DELETE_ERROR
     */
    public function testDeleteThrowsExceptionIfRequestFails()
    {
        // assert we're trying to delete a non exisiting object
        $this->object->id = "aed0eb9b-0276-4da7-ad8";
        $this->object->delete();
    }

    /**
     * @covers Entity::delete
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionMessage could not delete object
     * @expectedExceptionCode DELETE_IDNOTSET
     */
    public function testDeleteThrowsExceptionIfNoIdIsSet()
    {
        // assert we're trying to delete an object without an ID
        $this->object->id = "";
        $this->object->delete();
    }

    /**
     * @covers Entity::getEndpoint
     */
    public function testGetEndpointGeneratesCorrectObject()
    {
        $expected = new \stdClass();
        $expected->href = "contacts/{id}";
        $expected->rel = "self";

        //get valid endpoint
        $this->assertEquals(
            $expected,
            $this->object->getEndpoint()
        );
    }

    /**
     * @covers Entity::getEndpoint
     * @expectedException \Salesking\PHPSDK\Exception
     * @expectedExceptionMessage invalid endpoint
     * @expectedExceptionCode ENDPOINT_NOTFOUND
     */
    public function testGetEndpointThrowsExceptionOnNonExistingEndpoint()
    {
        $this->object->getEndpoint("notexisting");
    }
}
